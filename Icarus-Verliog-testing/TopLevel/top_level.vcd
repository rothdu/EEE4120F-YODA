$date
	Sun May 19 17:13:49 2024
$end
$version
	Icarus Verilog
$end
$timescale
	10ns
$end
$scope module TopLevel $end
$var wire 32 ! encrypters_data_ec1 [31:0] $end
$var wire 32 " encrypters_data_ec2 [31:0] $end
$var wire 1 # qspi_sending_ct $end
$var wire 1 $ qspi_ready_tp $end
$var wire 4 % qspi_data_ct [3:0] $end
$var wire 2 & encrypters_ready_pe [1:0] $end
$var wire 2 ' encrypters_program_pe [1:0] $end
$var wire 5 ( encrypters_key_rotation_pe [4:0] $end
$var wire 2 ) encrypters_data_ready_pe [1:0] $end
$var wire 2 * encrypters_data_ready_ec [1:0] $end
$var wire 32 + encrypters_data_pe [31:0] $end
$var wire 2 , encrypters_capture_ec [1:0] $end
$var reg 8 - char_read [7:0] $end
$var reg 8 . char_write [7:0] $end
$var reg 1 / char_write_progress $end
$var reg 1 0 clk $end
$var reg 32 1 key [31:0] $end
$var reg 1 2 prog_tp $end
$var reg 4 3 qspi_data_tp [3:0] $end
$var reg 1 4 qspi_ready_ct $end
$var reg 1 5 qspi_sending_tp $end
$var reg 1 6 reset $end
$var integer 32 7 bytes_sent [31:0] $end
$var integer 32 8 fd_read [31:0] $end
$var integer 32 9 fd_write [31:0] $end
$var integer 32 : i [31:0] $end
$var integer 32 ; j [31:0] $end
$scope begin encrypter_loop[0] $end
$var parameter 2 < e $end
$scope module e_inst $end
$var wire 1 = capture_c $end
$var wire 1 0 clk $end
$var wire 1 > data_ready_in_p $end
$var wire 1 ? prog_p $end
$var wire 1 6 reset $end
$var wire 5 @ key_rotation_p [4:0] $end
$var wire 32 A data_in_p [31:0] $end
$var reg 32 B data_in_store [31:0] $end
$var reg 32 C data_out_c [31:0] $end
$var reg 1 D data_ready_out_c $end
$var reg 32 E keyOrigin [31:0] $end
$var reg 32 F keyRotated [31:0] $end
$var reg 6 G offset [5:0] $end
$var reg 1 H ready_p $end
$var reg 3 I state [2:0] $end
$upscope $end
$upscope $end
$scope begin encrypter_loop[1] $end
$var parameter 2 J e $end
$scope module e_inst $end
$var wire 1 K capture_c $end
$var wire 1 0 clk $end
$var wire 1 L data_ready_in_p $end
$var wire 1 M prog_p $end
$var wire 1 6 reset $end
$var wire 5 N key_rotation_p [4:0] $end
$var wire 32 O data_in_p [31:0] $end
$var reg 32 P data_in_store [31:0] $end
$var reg 32 Q data_out_c [31:0] $end
$var reg 1 R data_ready_out_c $end
$var reg 32 S keyOrigin [31:0] $end
$var reg 32 T keyRotated [31:0] $end
$var reg 6 U offset [5:0] $end
$var reg 1 V ready_p $end
$var reg 3 W state [2:0] $end
$upscope $end
$upscope $end
$scope module c_inst $end
$var wire 1 0 clk $end
$var wire 2 X encrypters_data_ready [1:0] $end
$var wire 1 4 qspi_ready $end
$var wire 1 6 reset $end
$var reg 4 Y encrypter_data_index [3:0] $end
$var reg 32 Z encrypter_data_packet [31:0] $end
$var reg 2 [ encrypter_index [1:0] $end
$var reg 2 \ encrypters_capture [1:0] $end
$var reg 4 ] qspi_data [3:0] $end
$var reg 1 # qspi_sending $end
$var reg 2 ^ state [1:0] $end
$upscope $end
$scope module p_inst $end
$var wire 1 0 clk $end
$var wire 2 _ encrypters_ready [1:0] $end
$var wire 1 2 prog $end
$var wire 4 ` qspi_data [3:0] $end
$var wire 1 5 qspi_sending $end
$var wire 1 6 reset $end
$var reg 4 a encrypter_data_index [3:0] $end
$var reg 32 b encrypter_data_packet [31:0] $end
$var reg 2 c encrypter_index [1:0] $end
$var reg 32 d encrypters_data [31:0] $end
$var reg 2 e encrypters_data_ready [1:0] $end
$var reg 5 f encrypters_key_rotation [4:0] $end
$var reg 2 g encrypters_program [1:0] $end
$var reg 32 h key [31:0] $end
$var reg 4 i key_index [3:0] $end
$var reg 5 j key_rotation [4:0] $end
$var reg 1 $ qspi_ready $end
$var reg 3 k state [2:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1 J
b0 <
$end
#0
$dumpvars
b0 k
bx j
b1000 i
b0 h
b0 g
bx f
bx e
bx d
bx c
bx b
bx a
b0 `
b0 _
b0 ^
bx ]
b0 \
bx [
bx Z
bx Y
b0 X
b0 W
0V
b0 U
b0 T
b0 S
0R
b0 Q
b0 P
bx O
bx N
0M
xL
0K
b0 I
0H
b0 G
b0 F
b0 E
0D
b0 C
b0 B
bx A
bx @
0?
x>
0=
bx ;
bx :
b10000000000000000000000000000100 9
b10000000000000000000000000000011 8
b0 7
06
05
14
b0 3
02
b10110100001101010010101110010011 1
00
0/
bx .
bx -
b0 ,
bx +
b0 *
bx )
bx (
b0 '
b0 &
bx %
0$
0#
b0 "
b0 !
$end
#1
10
#2
1$
00
16
#3
b0 [
b1 ^
10
#4
00
06
#5
10
#6
00
12
#7
b1 k
10
#8
00
02
#9
10
#10
00
15
#11
b10 k
10
#12
00
b1011 3
b1011 `
b111 :
#13
b10110000000000000000000000000000 h
b111 i
10
#14
00
b100 3
b100 `
b110 :
#15
b10110100000000000000000000000000 h
b110 i
10
#16
00
b11 3
b11 `
b101 :
#17
b10110100001100000000000000000000 h
b101 i
10
#18
00
b101 3
b101 `
b100 :
#19
b10110100001101010000000000000000 h
b100 i
10
#20
00
b10 3
b10 `
b11 :
#21
b10110100001101010010000000000000 h
b11 i
10
#22
00
b1011 3
b1011 `
b10 :
#23
b10110100001101010010101100000000 h
b10 i
10
#24
00
b1001 3
b1001 `
b1 :
#25
b10110100001101010010101110010000 h
b1 i
10
#26
00
b11 3
b11 `
b0 :
#27
0$
b11 k
b10110100001101010010101110010011 h
b0 i
10
#28
1M
1?
b100 k
b11 '
b11 g
b10 c
b10110100001101010010101110010011 +
b10110100001101010010101110010011 A
b10110100001101010010101110010011 O
b10110100001101010010101110010011 d
00
05
b11111111111111111111111111111111 :
#29
b1 I
b1 W
10
#30
00
#31
b10 W
b10110100001101010010101110010011 S
b10 I
b10110100001101010010101110010011 E
10
#32
1V
b11 &
b11 _
1H
00
#33
b0 c
b0 k
10
#34
0M
0?
b0 '
b0 g
1$
00
#35
10
#36
00
#37
10
#38
00
15
#39
b101 k
0L
0>
b0 j
b0 )
b0 e
b1000 a
10
#40
00
b1110 3
b1110 `
b11101101 -
#41
b1110xxxxxxxxxxxxxxxxxxxxxxxxxxxx b
b111 a
10
#42
00
b1101 3
b1101 `
#43
b11101101xxxxxxxxxxxxxxxxxxxxxxxx b
b110 a
10
#44
00
b101 3
b101 `
b1011010 -
b1 7
#45
b111011010101xxxxxxxxxxxxxxxxxxxx b
b101 a
10
#46
00
b1010 3
b1010 `
#47
b1110110101011010xxxxxxxxxxxxxxxx b
b100 a
10
#48
00
b100 3
b100 `
b1001111 -
b10 7
#49
b11101101010110100100xxxxxxxxxxxx b
b11 a
10
#50
00
b1111 3
b1111 `
#51
b111011010101101001001111xxxxxxxx b
b10 a
10
#52
00
b11110010 -
b11 7
#53
b1110110101011010010011111111xxxx b
b1 a
10
#54
00
b10 3
b10 `
#55
b11101101010110100100111111110010 b
b0 a
10
#56
1>
b1 j
b1 c
b1 )
b1 e
b0 (
b0 @
b0 N
b0 f
b11101101010110100100111111110010 +
b11101101010110100100111111110010 A
b11101101010110100100111111110010 O
b11101101010110100100111111110010 d
b1000 a
00
b100 3
b100 `
b1000100 -
b100 7
#57
b11 I
b1001101010110100100111111110010 b
b111 a
10
#58
0>
b0 )
b0 e
00
#59
b1000100010110100100111111110010 b
b110 a
b100 I
b10110100001101010010101110010011 F
b10 &
b10 _
0H
b11101101010110100100111111110010 B
10
#60
b1 *
b1 X
1D
b1011001011011110110010001100001 !
b1011001011011110110010001100001 C
00
b1001010 -
b101 7
#61
b10 ^
b1000100010010100100111111110010 b
b101 a
b1000 Y
b1011001011011110110010001100001 Z
10
#62
1=
b1 ,
b1 \
b101 %
b101 ]
b111 Y
1#
b11 ^
00
b1010 3
b1010 `
#63
b101 I
b100 a
b101xxxx .
1/
10
#64
0=
b0 ,
b0 \
b10 I
b1001 %
b1001 ]
b110 Y
b11 &
b11 _
1H
b0 *
b0 X
0D
00
b1 3
b1 `
b11110 -
b110 7
#65
b1000100010010100001111111110010 b
b11 a
b0 ;
b1011001 .
0/
10
#66
b110 %
b110 ]
b101 Y
00
b1110 3
b1110 `
#67
b1000100010010100001111011110010 b
b10 a
b1101001 .
1/
10
#68
b1111 %
b1111 ]
b100 Y
00
b0 3
b0 `
b111 -
b111 7
#69
b1000100010010100001111000000010 b
b1 a
b1101111 .
0/
10
#70
b110 %
b110 ]
b11 Y
00
b111 3
b111 `
#71
b1000100010010100001111000000111 b
b0 a
1/
10
#72
1L
b100 %
b100 ]
b10 Y
b10 j
b0 c
b10 )
b10 e
b1 (
b1 @
b1 N
b1 f
b1000100010010100001111000000111 +
b1000100010010100001111000000111 A
b1000100010010100001111000000111 O
b1000100010010100001111000000111 d
b1000 a
00
b1011 3
b1011 `
b10110001 -
b1000 7
#73
b11 W
b10110100010010100001111000000111 b
b111 a
b1100100 .
0/
10
#74
0L
b0 )
b0 e
b110 %
b110 ]
b1 Y
00
b1 3
b1 `
#75
b10110001010010100001111000000111 b
b110 a
b100 W
b1101000011010100101011100100111 T
b1 &
b1 _
0V
b1 U
b1000100010010100001111000000111 P
1/
10
#76
b1 ^
b1 [
b1 %
b1 ]
b0 Y
b10 *
b10 X
1R
b101100001000000100100100100000 "
b101100001000000100100100100000 Q
00
b1011 3
b1011 `
b10111001 -
b1001 7
#77
b10 ^
b10110001101110100001111000000111 b
b101 a
b1000 Y
b101100001000000100100100100000 Z
b1100001 .
0/
10
#78
1K
b10 ,
b10 \
b10 %
b10 ]
b111 Y
b11 ^
00
b1001 3
b1001 `
#79
b101 W
b10110001101110010001111000000111 b
b100 a
b100001 .
1/
10
#80
0K
b0 ,
b0 \
b10 W
b1100 %
b1100 ]
b110 Y
b11 &
b11 _
1V
b0 *
b0 X
0R
00
b1000 3
b1000 `
b10000000 -
b1010 7
#81
b10110001101110011000111000000111 b
b11 a
b101100 .
0/
10
#82
b10 %
b10 ]
b101 Y
00
b0 3
b0 `
#83
b10110001101110011000000000000111 b
b10 a
1/
10
#84
b0 %
b0 ]
b100 Y
00
b1011 3
b1011 `
b10110001 -
b1011 7
#85
b10110001101110011000000010110111 b
b1 a
b100000 .
0/
10
#86
b100 %
b100 ]
b11 Y
00
b1 3
b1 `
#87
b10110001101110011000000010110001 b
b0 a
b1000000 .
1/
10
#88
1>
b1001 %
b1001 ]
b10 Y
b11 j
b1 c
b1 )
b1 e
b10 (
b10 @
b10 N
b10 f
b10110001101110011000000010110001 +
b10110001101110011000000010110001 A
b10110001101110011000000010110001 O
b10110001101110011000000010110001 d
b1000 a
00
b1111 3
b1111 `
b11111111 -
b1100 7
#89
b11 I
b11110001101110011000000010110001 b
b111 a
b1001001 .
0/
10
#90
0>
b0 )
b0 e
b10 %
b10 ]
b1 Y
00
#91
b11111111101110011000000010110001 b
b110 a
b100 I
b11010000110101001010111001001110 F
b10 &
b10 _
0H
b10 G
b10110001101110011000000010110001 B
b101001 .
1/
10
#92
b1 ^
b0 [
b0 %
b0 ]
b0 Y
b1 *
b1 X
1D
b1100001011011010010111011111111 !
b1100001011011010010111011111111 C
00
b1101 7
#93
b10 ^
b11111111111110011000000010110001 b
b101 a
b1000 Y
b1100001011011010010111011111111 Z
b100000 .
0/
10
#94
1=
b1 ,
b1 \
b110 %
b110 ]
b111 Y
b11 ^
00
05
#95
b101 I
b0 k
b1100000 .
1/
10
#96
0=
b0 ,
b0 \
b10 I
b1 %
b1 ]
b110 Y
b11 &
b11 _
1H
b0 *
b0 X
0D
00
#97
b1100001 .
0/
10
#98
b110 %
b110 ]
b101 Y
00
#99
1/
10
#100
b1101 %
b1101 ]
b100 Y
00
#101
b1101101 .
0/
10
#102
b10 %
b10 ]
b11 Y
00
#103
b101101 .
1/
10
#104
b1110 %
b1110 ]
b10 Y
00
#105
b101110 .
0/
10
#106
b1111 %
b1111 ]
b1 Y
00
#107
b11111110 .
1/
10
#108
b1 ^
b1 [
b0 Y
00
#109
0#
b11111111 .
0/
10
#110
00
#111
10
#112
00
#113
10
#114
00
